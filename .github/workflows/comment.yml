name: "Trigger Terraform Plan on Comment"

on: issue_comment

env:
  TF_LOG: INFO
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  terraform-plan:
    name: "Run Terraform Plan on Comment"
    if: ${{ github.event.issue.pull_request }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        # We keep Terraform files in the terraform directory.
        working-directory: ./terraform

    steps:
      - name: "Check comment"
        id: check-comment
        run: |
          echo "Comment is ${{ github.event.comment.body }}"
          if [[ "${{ github.event.comment.body }}" == "terraform plan" ]]; then
            echo "Triggering Terraform plan..."
            echo "triggerplan=true" >> $GITHUB_OUTPUT
          else
             echo "triggerplan=false" >> $GITHUB_OUTPUT
             exit 0
          fi

      - name: Checkout the repository to the runner
        if: steps.check-comment.outputs.triggerplan == true
        uses: actions/checkout@v4

      - name: Setup Terraform with specified version on the runner
        if: steps.check-comment.outputs.triggerplan == true
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.3.0
      
      - name: Terraform init
        if: steps.check-comment.outputs.triggerplan == true
        id: init
        run: terraform init 
        
      - name: Terraform plan
        id: plan
        if: steps.check-comment.outputs.triggerplan == true
        run: |
          terraform plan -no-color -input=false
          echo "Terraform plan trigerred..."
      
      - uses: actions/github-script@v6
        if: steps.check-comment.outputs.triggerplan == true
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
